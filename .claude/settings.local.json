{
  "permissions": {
    "allow": [
      "Bash(where python)",
      "Bash(python:*)",
      "Bash(venvScripts:*)",
      "Bash(pip install:*)",
      "Bash(call venvScriptsactivate)",
      "Bash(\"venv/Scripts/pip.exe\" install -r requirements.txt)",
      "Bash(\"venv/Scripts/python.exe\" test_capture_fixes.py)",
      "Bash(rm:*)",
      "Bash(\"venv/Scripts/python.exe\" -m py_compile src/core/capture.py)",
      "Bash(\"venv/Scripts/python.exe\" --version)",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.capture import ScreenCapture; print(''Syntax OK'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; print(''App import OK'')\")",
      "Bash(git add:*)",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; app = TutorialMakerApp(); print(''Initial state:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After toggle:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After second toggle:'', app.event_filter.settings.filter_keystrokes)\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; app = TutorialMakerApp(); print(''Initial state:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After toggle:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After second toggle:'', app.event_filter.settings.filter_keystrokes)\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.gui.desktop_app import TutorialMakerDesktopApp; print(''Testing desktop app import...'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.capture import ScreenCapture; from src.core.event_processor import EventProcessor; from src.core.ocr import OCREngine; from src.core.smart_ocr import SmartOCRProcessor; from src.core.storage import TutorialStorage; sc = ScreenCapture(); ocr = OCREngine(); smart_ocr = SmartOCRProcessor(ocr); storage = TutorialStorage(); ep = EventProcessor(sc, ocr, smart_ocr, storage); print(''EventProcessor initialization successful''); print(''Has _last_screenshot attr:'', hasattr(ep, ''_last_screenshot''))\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.gui.desktop_app import TutorialMakerDesktopApp; print(''Desktop app with keystroke filter checkbox - import successful'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.gui.desktop_app import TutorialMakerDesktopApp; from src.gui.recording_controls import RecordingControlWindow; from src.core.app import TutorialMakerApp; print(''Testing dynamic recording controls sizing...'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.gui.screen_selector import ScreenSelectorDialog; from src.core.capture import ScreenCapture; import tkinter as tk; print(''Screen selector components imported successfully'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; app = TutorialMakerApp(); print(''Testing monitor selection with web interface...'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.gui.screen_selector import ScreenSelectorDialog; from src.core.capture import ScreenCapture; import tkinter as tk; print(''Screen selector components imported successfully'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; app = TutorialMakerApp(); app.web_mode = True; print(''Testing tutorial creation in web mode...''); tutorial_id = app.new_tutorial(''Test Tutorial''); print(f''Created tutorial: {tutorial_id}'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; from src.core.events import MouseClickEvent, KeyPressEvent; app = TutorialMakerApp(); print(''Initial filter state:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After toggle:'', app.event_filter.settings.filter_keystrokes); mouse_event = MouseClickEvent(100, 100, ''left'', 12345); key_event = KeyPressEvent(''a'', 12346); from src.core.session import RecordingSession; session = RecordingSession(''test_session'', ''Test''); session.start_recording(); mouse_decision = app.event_filter.should_capture_event(mouse_event, session); key_decision = app.event_filter.should_capture_event(key_event, session); print(f''Mouse click decision: should_capture={mouse_decision.should_capture}, reason={mouse_decision.reason}''); print(f''Key press decision: should_capture={key_decision.should_capture}, reason={key_decision.reason}'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; from src.core.events import MouseClickEvent, KeyPressEvent, EventType; app = TutorialMakerApp(); print(''Initial filter state:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After toggle:'', app.event_filter.settings.filter_keystrokes); mouse_event = MouseClickEvent(12345, 100, 100, ''left'', True); key_event = KeyPressEvent(12346, ''a'', False, False); from src.core.session import RecordingSession; session = RecordingSession(''test_session'', ''Test''); session.start_recording(); mouse_decision = app.event_filter.should_capture_event(mouse_event, session); key_decision = app.event_filter.should_capture_event(key_event, session); print(f''Mouse click decision: should_capture={mouse_decision.should_capture}, reason={mouse_decision.reason}''); print(f''Key press decision: should_capture={key_decision.should_capture}, reason={key_decision.reason}'')\")",
      "Bash(\"venv/Scripts/python.exe\" -c \"from src.core.app import TutorialMakerApp; from src.core.events import MouseClickEvent, KeyPressEvent, EventType; from src.core.session_manager import RecordingSession; app = TutorialMakerApp(); print(''Initial filter state:'', app.event_filter.settings.filter_keystrokes); app.toggle_keystroke_filtering(); print(''After toggle:'', app.event_filter.settings.filter_keystrokes); mouse_event = MouseClickEvent(12345, 100, 100, ''left'', True); key_event = KeyPressEvent(12346, ''a'', False, False); session = RecordingSession(''test_session'', ''Test''); session.start(); print(''Session status:'', session.status); mouse_decision = app.event_filter.should_capture_event(mouse_event, session); key_decision = app.event_filter.should_capture_event(key_event, session); print(f''Mouse click decision: should_capture={mouse_decision.should_capture}, reason={mouse_decision.reason}''); print(f''Key press decision: should_capture={key_decision.should_capture}, reason={key_decision.reason}'')\")",
      "Bash(\"venv/Scripts/python.exe\" test_filter_debug.py)",
      "Bash(\"venv/Scripts/python.exe\" test_simple_filter.py)",
      "Bash(\"venv/Scripts/python.exe\" test_user_interaction.py)",
      "Bash(\"venv/Scripts/python.exe\" test_toggle_only.py)",
      "Bash(grep:*)",
      "Bash(\"venv/Scripts/python.exe\" test_fixed_toggle.py)",
      "Bash(\"venv/Scripts/python.exe\" test_filter_after_fix.py)",
      "Bash(\"venv/Scripts/python.exe\" test_filter_simple.py)",
      "Bash(\"venv/Scripts/python.exe\" test_runner.py)",
      "Bash(\"venv/Scripts/python.exe\" run_tests.py)",
      "Bash(\"venv/Scripts/python.exe\" -m pytest tests/test_event_filter.py -v)",
      "Bash(\"venv/Scripts/python.exe\" -m pytest tests/test_event_filter.py -v --tb=short)",
      "Bash(\"venv/Scripts/python.exe\" tests/test_event_filter.py)"
    ],
    "deny": [],
    "ask": [],
    "defaultMode": "acceptEdits"
  }
}