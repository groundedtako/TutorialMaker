name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate tag
      id: tag
      run: |
        TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
    
    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          ## Changes
          - Built from latest main branch
          - Cross-platform executables included
        draft: false
        prerelease: false

  build:
    name: Build Executables
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: tutorialmaker-linux
          - os: windows-latest  
            artifact_name: tutorialmaker-windows
          - os: macos-latest
            artifact_name: tutorialmaker-macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr libtesseract-dev
        mkdir -p tesseract_bundle/bin tesseract_bundle/share/tessdata
        cp /usr/bin/tesseract tesseract_bundle/bin/ || echo "Tesseract binary not found"
        find /usr/share -name "tessdata" -type d -exec cp -r {}/* tesseract_bundle/share/tessdata/ \; 2>/dev/null || echo "Tessdata not found in /usr/share"
        find /usr -name "*.traineddata" -exec cp {} tesseract_bundle/share/tessdata/ \; 2>/dev/null || echo "No .traineddata files found"
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract
        mkdir -p tesseract_bundle/bin tesseract_bundle/share/tessdata
        cp $(which tesseract) tesseract_bundle/bin/ || echo "Tesseract binary not found"
        TESSDATA_PREFIX=$(brew --prefix tesseract)/share/tessdata
        if [ -d "$TESSDATA_PREFIX" ]; then
          cp -r "$TESSDATA_PREFIX"/* tesseract_bundle/share/tessdata/
        else
          echo "Tessdata directory not found at $TESSDATA_PREFIX"
        fi
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $url = "https://github.com/UB-Mannheim/tesseract/releases/download/v5.3.3.20231005/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
        Invoke-WebRequest -Uri $url -OutFile "tesseract-installer.exe"
        Start-Process -FilePath "tesseract-installer.exe" -ArgumentList "/S" -Wait
        New-Item -ItemType Directory -Force -Path "tesseract_bundle/bin"
        New-Item -ItemType Directory -Force -Path "tesseract_bundle/share/tessdata"
        if (Test-Path "C:/Program Files/Tesseract-OCR/tesseract.exe") {
          Copy-Item "C:/Program Files/Tesseract-OCR/tesseract.exe" "tesseract_bundle/bin/"
        }
        if (Test-Path "C:/Program Files/Tesseract-OCR/tessdata") {
          Copy-Item "C:/Program Files/Tesseract-OCR/tessdata/*" "tesseract_bundle/share/tessdata/" -Recurse -ErrorAction SilentlyContinue
        }
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pyinstaller-hooks-contrib
    
    - name: Build executable
      run: |
        pyinstaller tutorialmaker.spec --clean --noconfirm
    
    - name: Test executable
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cd dist/tutorialmaker-windows && ./tutorialmaker-windows.exe --help || echo "Windows executable test completed"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cd dist/tutorialmaker-macos && ./tutorialmaker-macos --help || echo "macOS executable test completed"
        else
          cd dist/tutorialmaker-linux && ./tutorialmaker-linux --help || echo "Linux executable test completed"
        fi
    
    - name: Create archive
      shell: bash
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        cd dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a -tzip tutorialmaker-windows-amd64.zip tutorialmaker-windows/
          echo "ARCHIVE_NAME=dist/tutorialmaker-windows-amd64.zip" >> $GITHUB_ENV
          echo "ARCHIVE_FILE=tutorialmaker-windows-amd64.zip" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          tar -czf tutorialmaker-macos-amd64.tar.gz tutorialmaker-macos/
          echo "ARCHIVE_NAME=dist/tutorialmaker-macos-amd64.tar.gz" >> $GITHUB_ENV
          echo "ARCHIVE_FILE=tutorialmaker-macos-amd64.tar.gz" >> $GITHUB_ENV
        else
          tar -czf tutorialmaker-linux-amd64.tar.gz tutorialmaker-linux/
          echo "ARCHIVE_NAME=dist/tutorialmaker-linux-amd64.tar.gz" >> $GITHUB_ENV
          echo "ARCHIVE_FILE=tutorialmaker-linux-amd64.tar.gz" >> $GITHUB_ENV
        fi
        echo "Created archive:"
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No archives found"
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_FILE }}
        asset_content_type: application/octet-stream